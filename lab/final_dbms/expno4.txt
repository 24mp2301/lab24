-- Create Employee table
CREATE TABLE EMPLOYEE (
    ID CHAR(5) PRIMARY KEY,
    DeptID NUMERIC(2),
    Name CHAR(15),
    Designation CHAR(15),
    Basic NUMERIC(10,2),
    Gender CHAR(1)
);

-- Insert sample values into EMPLOYEE
INSERT INTO EMPLOYEE (ID, DeptID, Name, Designation, Basic, Gender) VALUES
('101', 1, 'Ram', 'Typist', 2000.00, 'M'),
('102', 2, 'Arun', 'Analyst', 6000.00, 'M'),
('121', 1, 'Ruby', 'Typist', 2010.00, 'F'),
('156', 3, 'Mary', 'Manager', 4500.00, 'F'),
('123', 2, 'Mridula', 'Analyst', 6000.00, 'F'),
('114', 4, 'Menon', 'Clerk', 1500.00, 'M'),
('115', 4, 'Tim', 'Clerk', 1500.00, 'M'),
('127', 2, 'Kiran', 'Manager', 4000.00, 'M');

-- Create DEPARTMENT table
CREATE TABLE DEPARTMENT (
    DeptID INT PRIMARY KEY,
    DNAME VARCHAR(20)
);

-- Insert values into DEPARTMENT
INSERT INTO DEPARTMENT (DeptID, DNAME) VALUES
(1, 'DESIGN'),
(2, 'CODING'),
(3, 'TESTING'),
(4, 'RESEARCH');

-- 1. Display different designations
SELECT DISTINCT Designation FROM EMPLOYEE;

-- 2. Display the number of different designations
SELECT COUNT(DISTINCT Designation) AS Designation_Count FROM EMPLOYEE;

-- 3. Display employee details with calculated salary components
SELECT ID, Name, Designation, DeptID, Basic, 
       (Basic * 0.075) AS DA, 
       (Basic * 0.10) AS HRA, 
       (Basic + (Basic * 0.075) + (Basic * 0.10)) AS NET_SAL
FROM EMPLOYEE;

-- 4. Maximum salary for female employees
SELECT MAX(Basic) AS Max_Female_Salary FROM EMPLOYEE WHERE Gender = 'F';

-- 5. Add manager_id column
ALTER TABLE EMPLOYEE ADD ManagerID CHAR(5);

-- 6. Update manager IDs
UPDATE EMPLOYEE SET ManagerID = NULL WHERE ID = '101';
UPDATE EMPLOYEE SET ManagerID = '101' WHERE ID IN ('102', '121', '156');
UPDATE EMPLOYEE SET ManagerID = '102' WHERE ID IN ('123', '114', '115');
UPDATE EMPLOYEE SET ManagerID = '121' WHERE ID = '127';

-- 7. Add joining date column
ALTER TABLE EMPLOYEE ADD JoiningDate DATE;

-- 8. Display employees sorted by seniority (assuming JoiningDate values are added)
SELECT * FROM EMPLOYEE ORDER BY JoiningDate ASC;

-- 9. Make DeptID a foreign key in EMPLOYEE
ALTER TABLE EMPLOYEE ADD CONSTRAINT FK_DEPT FOREIGN KEY (DeptID) REFERENCES DEPARTMENT(DeptID);

-- 10. Insert DeptID values into DEPARTMENT (already done above)

-- 11. Display employee name and department name
SELECT EMPLOYEE.Name, DEPARTMENT.DNAME FROM EMPLOYEE
JOIN DEPARTMENT ON EMPLOYEE.DeptID = DEPARTMENT.DeptID;

-- 12. Display department name of Arun
SELECT DNAME FROM DEPARTMENT WHERE DeptID = (SELECT DeptID FROM EMPLOYEE WHERE Name = 'Arun');

-- 13. Display total salary paid by DESIGN department
SELECT SUM(Basic) FROM EMPLOYEE WHERE DeptID = (SELECT DeptID FROM DEPARTMENT WHERE DNAME = 'DESIGN');

-- 14. Display details of typists in DESIGN department
SELECT * FROM EMPLOYEE WHERE Designation = 'Typist' AND DeptID = (SELECT DeptID FROM DEPARTMENT WHERE DNAME = 'DESIGN');

-- 15. Display salaries of employees in RESEARCH department
SELECT Name, Basic FROM EMPLOYEE WHERE DeptID = (SELECT DeptID FROM DEPARTMENT WHERE DNAME = 'RESEARCH');

-- 16. List female employees in TESTING department
SELECT * FROM EMPLOYEE WHERE Gender = 'F' AND DeptID = (SELECT DeptID FROM DEPARTMENT WHERE DNAME = 'TESTING');

-- 17. Display employees not in CODING or TESTING
SELECT * FROM EMPLOYEE WHERE DeptID NOT IN (SELECT DeptID FROM DEPARTMENT WHERE DNAME IN ('CODING', 'TESTING'));

-- 18. Display department giving maximum salary
SELECT DNAME FROM DEPARTMENT WHERE DeptID = (SELECT DeptID FROM EMPLOYEE GROUP BY DeptID ORDER BY SUM(Basic) DESC LIMIT 1);

-- 19. Display department with minimum employees
SELECT DNAME FROM DEPARTMENT WHERE DeptID = (SELECT DeptID FROM EMPLOYEE GROUP BY DeptID ORDER BY COUNT(*) ASC LIMIT 1);

-- 20. Display second maximum salary
SELECT DISTINCT Basic FROM EMPLOYEE ORDER BY Basic DESC LIMIT 1 OFFSET 1;

-- 21. Display second minimum salary
SELECT DISTINCT Basic FROM EMPLOYEE ORDER BY Basic ASC LIMIT 1 OFFSET 1;

-- 22. Employees earning above department average
SELECT Name FROM EMPLOYEE E WHERE Basic > (SELECT AVG(Basic) FROM EMPLOYEE WHERE DeptID = E.DeptID);

-- 23. Employees working under manager Ram
SELECT Name FROM EMPLOYEE WHERE ManagerID = (SELECT ID FROM EMPLOYEE WHERE Name = 'Ram');
